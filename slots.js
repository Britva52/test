document.addEventListener('DOMContentLoaded', function() {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–≥—Ä—ã
    const config = {
        symbols: ["üçí", "üçã", "üîî", "üçâ", "‚≠ê", "7"],
        paytable: {
            "üçíüçíüçí": 3, "üçãüçãüçã": 5, "üîîüîîüîî": 10,
            "üçâüçâüçâ": 15, "‚≠ê‚≠ê‚≠ê": 20, "777": 50
        },
        spinDuration: 2000,
        reelDelay: 300
    };

    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã DOM
    const reels = [
        document.getElementById('reel1'),
        document.getElementById('reel2'),
        document.getElementById('reel3')
    ];
    const spinBtn = document.getElementById('spin-slot');
    const betInput = document.getElementById('slot-bet-amount');
    const messageBox = document.getElementById('slot-message');

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    let isSpinning = false;
    let animationId = null;
    let startTime = null;
    let stopTimes = [];
    let finalSymbols = [];

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
    function init() {
        resetReels();
        spinBtn.addEventListener('click', startSpin);
    }

    // –°–±—Ä–æ—Å –±–∞—Ä–∞–±–∞–Ω–æ–≤
    function resetReels() {
        reels.forEach(reel => {
            reel.textContent = "üçí";
            reel.dataset.symbol = "üçí";
            reel.classList.remove('winning');
            reel.dataset.stopped = "false";
        });
    }

    // –ó–∞–ø—É—Å–∫ –≤—Ä–∞—â–µ–Ω–∏—è
    async function startSpin() {
        if (isSpinning) return;

        const betAmount = parseFloat(betInput.value);
        if (!validateBet(betAmount)) return;

        isSpinning = true;
        disableButtons(true);
        showMessage("–ë–∞—Ä–∞–±–∞–Ω—ã –∫—Ä—É—Ç—è—Ç—Å—è...", true);

        try {
            // –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
            const response = await sendRequest('/api/deduct_bet/', {
                amount: betAmount
            });

            if (!response.success) throw new Error("Deduction failed");
            updateBalance(response.new_balance);

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
            resetReels();
            startTime = performance.now();
            stopTimes = [
                startTime + config.spinDuration,
                startTime + config.spinDuration + config.reelDelay,
                startTime + config.spinDuration + config.reelDelay * 2
            ];

            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            finalSymbols = reels.map(() =>
                config.symbols[Math.floor(Math.random() * config.symbols.length)]
            );

            // –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏
            animateReels(betAmount);
        } catch (error) {
            console.error("Spin error:", error);
            endSpin(false);
        }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞–≤–∫–∏
    function validateBet(amount) {
        if (isNaN(amount)) {
            showMessage("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", false);
            return false;
        }

        if (amount <= 0) {
            showMessage("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0", false);
            return false;
        }

        const balance = getBalance();
        if (balance < amount) {
            showMessage(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ë–∞–ª–∞–Ω—Å: ${balance}$`, false);
            return false;
        }

        return true;
    }

    // –ê–Ω–∏–º–∞—Ü–∏—è –±–∞—Ä–∞–±–∞–Ω–æ–≤
    function animateReels(betAmount) {
        const now = performance.now();
        let allStopped = true;

        reels.forEach((reel, index) => {
            if (now < stopTimes[index]) {
                allStopped = false;
                reel.textContent = config.symbols[
                    Math.floor(Math.random() * config.symbols.length)
                ];
            } else if (reel.dataset.stopped === "false") {
                reel.textContent = finalSymbols[index];
                reel.dataset.stopped = "true";
            }
        });

        if (!allStopped) {
            animationId = requestAnimationFrame(() => animateReels(betAmount));
        } else {
            finishSpin(betAmount);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    function finishSpin(betAmount) {
        const result = reels.map(r => r.textContent).join('');
        const multiplier = config.paytable[result] || 0;
        const winAmount = betAmount * multiplier;

        if (winAmount > 0) {
            reels.forEach(reel => reel.classList.add('winning'));
            showMessage(`–í—ã–∏–≥—Ä—ã—à: ${winAmount}$ (x${multiplier})`, true);

            // –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞
            sendRequest('/api/add_winnings/', {
                amount: winAmount
            }).then(response => {
                if (response.success) updateBalance(response.new_balance);
            });
        } else {
            showMessage("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑", false);
        }

        endSpin();
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Ä–∞—â–µ–Ω–∏—è
    function endSpin() {
        cancelAnimationFrame(animationId);
        isSpinning = false;
        disableButtons(false);
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
    function sendRequest(url, data) {
        return fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': getCookie('csrftoken')
            },
            body: JSON.stringify(data)
        }).then(res => res.json());
    }

    function getCookie(name) {
        let cookieValue = null;
        if (document.cookie && document.cookie !== '') {
            const cookies = document.cookie.split(';');
            for (let i = 0; i < cookies.length; i++) {
                const cookie = cookies[i].trim();
                if (cookie.startsWith(name + '=')) {
                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                    break;
                }
            }
        }
        return cookieValue;
    }

    function updateBalance(balance) {
        document.querySelectorAll('.balance-amount').forEach(el => {
            el.textContent = balance.toFixed(2) + '$';
        });
        localStorage.setItem('casinoBalance', balance);
    }

    function getBalance() {
        const balanceEl = document.querySelector('.balance-amount');
        return parseFloat(balanceEl.textContent.replace('$', '')) || 100;
    }

    function showMessage(message, isSuccess) {
        if (messageBox) {
            messageBox.textContent = message;
            messageBox.style.color = isSuccess ? '#2ecc71' : '#e74c3c';
        }
    }

    function disableButtons(disabled) {
        document.querySelectorAll('button').forEach(btn => {
            btn.disabled = disabled;
        });
    }

    // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
    init();
});